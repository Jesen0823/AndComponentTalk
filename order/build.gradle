if (isDebug) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

// 自定义选项
def mVersions = rootProject.ext.mVersions
def mDencies = rootProject.ext.mDencies
def mIds = rootProject.ext.mIds
def host_url = rootProject.ext.host_url


android {
    compileSdkVersion mVersions.compileSdk

    defaultConfig {
        if (isDebug) {
            applicationId mIds.order
        }
        minSdkVersion mVersions.minSdk
        targetSdkVersion mVersions.targetSdk
        versionCode mVersions.versionCode
        versionName mVersions.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // 这个方法接收三个非空的参数，第一个：确定值的类型，第二个：指定key的名字，第三个：传值（必须是String）
        // 为什么需要定义这个？因为src代码中有可能需要用到跨模块交互，如果是组件化模块显然不行
        // 切记：不能在android根节点，只能在defaultConfig或buildTypes节点下
        buildConfigField("boolean", "isDebug", String.valueOf(isDebug))

        // 在gradle文件中配置选项参数值（用于APT传参接收）
        // 切记：必须写在defaultConfig节点下
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName(), packageNameForAPT: packageNameForAPT]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            if (isDebug) {
                // 如果是组件化模式，需要单独运行时
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            } else {
                // 集成化模式，整个项目打包apk
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    // release 时 debug 目录下文件不需要合并到主工程
                    exclude '**/debug/**'
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    implementation project(path: ':util_lib')
    implementation project(path: ':common_lib')

    mDencies.each { k, v -> implementation v }

    // apt注解
    implementation project(path: ':component_annotation_lib')
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    // apt注解处理器
    annotationProcessor project(path: ':component_compiler_lib')
}